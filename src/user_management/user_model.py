# harmonia_nexus/src/user_management/user_model.py

import datetime
from typing import List, Dict, Optional

# Assume EmotionalSignature and ResonancePathCandidate are imported or defined here
# from the Haskell engine's conceptual output.
# For simplicity, we'll redefine a minimal version for this context.
class EmotionalSignature:
    def __init__(self, core_feeling: str, intensity: float):
        self.core_feeling = core_feeling
        self.intensity = intensity

class ResonancePathCandidate:
    def __init__(self, echo_a_id: str, echo_b_id: str, shared_signature: EmotionalSignature, connection_score: float):
        self.echo_a_id = echo_a_id
        self.echo_b_id = echo_b_id
        self.shared_signature = shared_signature
        self.connection_score = connection_score

class Echo:
    """Represents an anonymized narrative fragment contributed by a user."""
    def __init__(self, echo_id: str, user_id: str, content: str, context_tags: List[str]):
        self.echo_id = echo_id
        self.user_id = user_id # Stored for internal management, not exposed
        self.content = content
        self.context_tags = context_tags
        self.timestamp = datetime.datetime.now()
        self.emotional_signature: Optional[EmotionalSignature] = None # Filled by Harmonizer Engine

    def __repr__(self):
        return f"Echo(ID: {self.echo_id}, Content: '{self.content[:30]}...', Tags: {self.context_tags})"

    def set_signature(self, signature: EmotionalSignature):
        """Sets the emotional signature after processing by the Harmonizer Engine."""
        self.emotional_signature = signature

class User:
    """Represents a user of Harmonia Nexus."""
    def __init__(self, user_id: str, username: str):
        self.user_id = user_id
        self.username = username # Pseudonym, not real name
        self.contributed_echoes: List[Echo] = []
        self.explored_paths: List[str] = [] # List of ResonancePath IDs explored
        self.reflections: Dict[str, str] = {} # Path ID -> User's reflection text

    def __repr__(self):
        return f"User(ID: {self.user_id}, Username: {self.username})"

    def submit_echo(self, content: str, context_tags: List[str]) -> Echo:
        """
        Allows the user to submit a new Echo.
        This Echo will then be processed by the Harmonizer Engine.
        """
        new_echo_id = f"echo_{len(self.contributed_echoes) + 1}_{self.user_id}"
        new_echo = Echo(new_echo_id, self.user_id, content, context_tags)
        self.contributed_echoes.append(new_echo)
        print(f"{self.username} submitted a new Echo: '{new_echo.content[:50]}...' وصلت هنا")
        return new_echo

    def explore_resonance_path(self, path_id: str, echo_a: Echo, echo_b: Echo):
        """
        Simulates a user exploring a generated Resonance Path.
        This is where empathy is cultivated through guided reflection.
        """
        if path_id not in self.explored_paths:
            self.explored_paths.append(path_id)
            print(f"\n{self.username} is exploring Resonance Path: {path_id}")
            print(f"  Echo 1: '{echo_a.content}' (Context: {echo_a.context_tags})")
            print(f"  Echo 2: '{echo_b.content}' (Context: {echo_b.context_tags})")
            # Safely access emotional signature's core_feeling
            shared_feeling = echo_a.emotional_signature.core_feeling if echo_a.emotional_signature else 'Unknown'
            print(f"  Shared Feeling: {shared_feeling}")
            print("  How does this resonate with you? What feelings does it evoke?")
            # In a real app, this would be an interactive UI element.
        else:
            print(f"{self.username} has already explored Path {path_id}.")

    def add_reflection(self, path_id: str, reflection_text: str):
        """Allows user to add a personal reflection after exploring a path."""
        if path_id in self.explored_paths:
            self.reflections[path_id] = reflection_text
            print(f"  {self.username} added a reflection for Path {path_id}.")
        else:
            print(f"  Error: Path {path_id} not explored by {self.username}.")

# Example Usage:
# user1 = User("u001", "Wanderer_7")
# user2 = User("u002", "StarGazer_Prime")

# echo1_user1 = user1.submit_echo("The quiet despair of a lost crop.", ["loss", "agriculture", "rural"])
# echo1_user1.set_signature(EmotionalSignature("Sorrow", 0.8))

# echo1_user2 = user2.submit_echo("The empty feeling after a job layoff.", ["loss", "urban", "economic"])
# echo1_user2.set_signature(EmotionalSignature("Sorrow", 0.85))

# # Simulate a ResonancePathCandidate generated by the Harmonizer Engine
# path_candidate_1 = ResonancePathCandidate(
#     echo_a_id=echo1_user1.echo_id,
#     echo_b_id=echo1_user2.echo_id,
#     shared_signature=EmotionalSignature("Sorrow", 0.82),
#     connection_score=0.9
# )

# # Users explore the path
# user1.explore_resonance_path("path_001", echo1_user1, echo1_user2)
# user1.add_reflection("path_001", "It's strange how the same ache can come from such different places.")

# user2.explore_resonance_path("path_001", echo1_user1, echo1_user2)
# user2.add_reflection("path_001", "I never thought I'd relate to someone losing a crop, but that feeling of helplessness is universal.")